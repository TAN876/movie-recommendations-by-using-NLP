import pandas as pd
from sklearn.feature_extraction.text import TfidfVectorizer
from sklearn.metrics.pairwise import cosine_similarity

# Sample dataset (you can load your own dataset here)
data = {
    'title': [
        'The Matrix',
        'John Wick',
        'Inception',
        'The Lord of the Rings',
        'Interstellar',
        'The Hobbit',
        'The Dark Knight'
    ],
    'description': [
        'A computer hacker learns about the true nature of his reality and his role in the war against its controllers.',
        'An ex-hitman comes out of retirement to track down the gangsters that killed his dog and took everything from him.',
        'A thief who steals corporate secrets through dream-sharing technology is given the inverse task of planting an idea.',
        'A meek Hobbit and eight companions set out on a journey to destroy the powerful One Ring and save Middle-earth.',
        'A team of explorers travel through a wormhole in space in an attempt to ensure humanityâ€™s survival.',
        'Bilbo Baggins is swept into an epic quest to reclaim the lost Dwarf Kingdom of Erebor from the fearsome dragon Smaug.',
        'Batman must accept one of the greatest psychological and physical tests of his ability to fight injustice.'
    ]
}

# Create a DataFrame
df = pd.DataFrame(data)

# Initialize the TF-IDF Vectorizer
tfidf = TfidfVectorizer(stop_words='english')

# Fit and transform the movie descriptions
tfidf_matrix = tfidf.fit_transform(df['description'])

# Compute the cosine similarity matrix
cosine_sim = cosine_similarity(tfidf_matrix, tfidf_matrix)

# Function to get movie recommendations
def recommend_movies(title, cosine_sim=cosine_sim):
    # Get the index of the movie that matches the title
    idx = df[df['title'] == title].index[0]

    # Get the pairwise similarity scores
    sim_scores = list(enumerate(cosine_sim[idx]))

    # Sort the movies based on similarity scores
    sim_scores = sorted(sim_scores, key=lambda x: x[1], reverse=True)

    # Get scores of the 5 most similar movies (excluding itself)
    sim_scores = sim_scores[1:6]

    # Get the movie indices
    movie_indices = [i[0] for i in sim_scores]

    # Return the top 5 most similar movies
    return df['title'].iloc[movie_indices]

# Example usage
movie = 'Inception'
print(f"\nMovies similar to '{movie}':\n")
print(recommend_movies(movie))
